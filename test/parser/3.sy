 int var1 = 1;

    // const variable
    const int var3 = 3;  //3.常量

    void while_stmt() {    //6.while语句
      while (var1 == 1) {
        var1 = 2;
      }
    }

    void break_continue(){  //7.break/continue语句
        while(1){
            if(var1<5){var1++;continue;}
            else break;
            var1=6;
        }
    }
    int return_stmt() { return 1; }  //8.return语句

    void expr() {   //9.算术运算
      // arithmetic operators
      // binary operators
      var1 = var2 + var3;
      var1 = var2 - var3;
      var1 = var2 * var3;
      var1 = var2 / var3;
      var1 = var2 % var3;
      // unary operators
      var1 = -var2;

      // relational operators
      int cmp_result;   //10.关系运算
      cmp_result = (var1 == var2);
      cmp_result = (var1 > var2);
      cmp_result = (var1 < var2);
      cmp_result = (var1 >= var2);
      cmp_result = (var1 <= var2);
      cmp_result = (var1 != var2);

      // logical operators  //11.赋值运算
      int oprand1 = 1;
      int oprand2 = 0;

      //12.逻辑运算
      cmp_result = var1 && var2;
      cmp_result = var1 || var2;
      cmp_result = !var1;

    }

    void array_decl_access() {  //14.数组
      // declration
      int arr_1d[4] = {1, 2, 3, 4};
      int arr_2d[4][4] = {{1, 2, 3, 4}, {2, 3, 4, 5}, {3, 4, 5, 6}, {4, 5, 6, 7}};
      // access
      arr_1d[2] = 4;
      arr_2d[2][3] = 6;
    }

    int callee_void() { return 1; }     //17.无参有返函数

    int callee_args(int a, int b) { return 1; }     //18.有参有返函数

    void caller() {
      int result;
      callee_noreturn();
      result = callee_void();
      result = callee_args(1, 2);
    }

    void float_impl() {     //19.浮点数
      float f1 = 1.0;
      float f2 = 2.0;

      float tmp_result;
      tmp_result = f1 + f2;
      tmp_result = f1 - f2;
      tmp_result = f1 * f2;
      tmp_result = f1 / f2;

      int cmp_result;
      cmp_result = f1 == f2;
      cmp_result = f1 > f2;
      cmp_result = f1 < f2;
      cmp_result = f1 >= f2;
      cmp_result = f1 <= f2;
      cmp_result = f1 != f2;
    }
int main(){     //20.库函数
    return 0;
}